// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: file.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServSrv_CurTime_FullMethodName   = "/apigprc.servSrv/CurTime"
	ServSrv_ConcatStr_FullMethodName = "/apigprc.servSrv/ConcatStr"
)

// ServSrvClient is the client API for ServSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServSrvClient interface {
	CurTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeResponse, error)
	ConcatStr(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TimeResponse, ConcatStrResponse], error)
}

type servSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewServSrvClient(cc grpc.ClientConnInterface) ServSrvClient {
	return &servSrvClient{cc}
}

func (c *servSrvClient) CurTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, ServSrv_CurTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servSrvClient) ConcatStr(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TimeResponse, ConcatStrResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServSrv_ServiceDesc.Streams[0], ServSrv_ConcatStr_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TimeResponse, ConcatStrResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServSrv_ConcatStrClient = grpc.ClientStreamingClient[TimeResponse, ConcatStrResponse]

// ServSrvServer is the server API for ServSrv service.
// All implementations must embed UnimplementedServSrvServer
// for forward compatibility.
type ServSrvServer interface {
	CurTime(context.Context, *TimeRequest) (*TimeResponse, error)
	ConcatStr(grpc.ClientStreamingServer[TimeResponse, ConcatStrResponse]) error
	mustEmbedUnimplementedServSrvServer()
}

// UnimplementedServSrvServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServSrvServer struct{}

func (UnimplementedServSrvServer) CurTime(context.Context, *TimeRequest) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurTime not implemented")
}
func (UnimplementedServSrvServer) ConcatStr(grpc.ClientStreamingServer[TimeResponse, ConcatStrResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ConcatStr not implemented")
}
func (UnimplementedServSrvServer) mustEmbedUnimplementedServSrvServer() {}
func (UnimplementedServSrvServer) testEmbeddedByValue()                 {}

// UnsafeServSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServSrvServer will
// result in compilation errors.
type UnsafeServSrvServer interface {
	mustEmbedUnimplementedServSrvServer()
}

func RegisterServSrvServer(s grpc.ServiceRegistrar, srv ServSrvServer) {
	// If the following call pancis, it indicates UnimplementedServSrvServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServSrv_ServiceDesc, srv)
}

func _ServSrv_CurTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServSrvServer).CurTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServSrv_CurTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServSrvServer).CurTime(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServSrv_ConcatStr_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServSrvServer).ConcatStr(&grpc.GenericServerStream[TimeResponse, ConcatStrResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServSrv_ConcatStrServer = grpc.ClientStreamingServer[TimeResponse, ConcatStrResponse]

// ServSrv_ServiceDesc is the grpc.ServiceDesc for ServSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigprc.servSrv",
	HandlerType: (*ServSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurTime",
			Handler:    _ServSrv_CurTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConcatStr",
			Handler:       _ServSrv_ConcatStr_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file.proto",
}
